<!-- ManageUsers.razor -->
@page "/manageusers"

@inject IJSRuntime JSRuntime
@using System.Text.Json

<link href="/css/site.css" rel="stylesheet" />

<style>
    body {
        background: url('images/BookBackground.jpg') center center repeat;
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        margin: 0;
    }

    .container {
        text-align: center;
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
    }

    select, button, input {
        margin: 10px;
        padding: 10px;
        font-size: 16px;
    }
</style>

<!-- User management component -->
<div class="container">
    <h1>Manage Users</h1>

    <!-- User action selection -->
    <div>
        <label for="userAction">Select Action:</label>
        <select id="userAction" @bind="selectedAction">
            <option value="Add">Add User</option>
            <option value="Edit">Edit User</option>
            <option value="Delete">Delete User</option>
            <option value="List">List Users</option>
        </select>

        <button @onclick="PerformAction">Go</button>
    </div>

    <!-- Add user form -->
    @if (selectedAction == "Add")
    {
        <div>
            <h3>Add a User</h3>
            <input type="text" placeholder="Username" @bind="newUser.Username" />
            <input type="text" placeholder="Email" @bind="newUser.Email" />
            <button @onclick="AddUser">Save</button>
        </div>
    }

    <!-- List users -->
    @if (selectedAction == "List")
    {
        <div>
            <h3>User List</h3>
            <ul>
                @foreach (var user in users)
                {
                    <li>@user.Username - @user.Email</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    // Selected user action
    private string selectedAction = "Add";

    // List of users
    private List<User> users = new List<User>();

    // New user being added
    private User newUser = new User();

    // Component initialization
    protected override void OnInitialized()
    {
        // Load users from file when the component is initialized
        users = LoadUsersFromFile();
    }

    // Perform the selected user action
    private void PerformAction()
    {
        switch (selectedAction)
        {
            case "Add":
                AddUser();
                break;
            case "Edit":
                // To be implemented
                break;
            case "Delete":
                // To be implemented
                break;
            case "List":
                // To be implemented
                break;
            default:
                break;
        }
    }

    // Add a new user
    private void AddUser()
    {
        users.Add(newUser);
        SaveUsersToFile();
        newUser = new User(); // Reset newUser for the next entry
    }

    // Load users from file
    private List<User> LoadUsersFromFile()
    {
        try
        {
            string json = System.IO.File.ReadAllText("wwwroot/users.json");
            return JsonSerializer.Deserialize<List<User>>(json) ?? new List<User>();
        }
        catch (Exception)
        {
            return new List<User>();
        }
    }

    // Save users to file
    private void SaveUsersToFile()
    {
        try
        {
            string filePath = "wwwroot/users.json";
            string json = JsonSerializer.Serialize(users);
            System.IO.File.WriteAllText(filePath, json);
        }
        catch (Exception ex)
        {
            // Log the exception or display an error message
            Console.WriteLine($"Error saving users to file: {ex.Message}");
        }
    }

    // User class definition
    public class User
    {
        public string Username { get; set; } = "";
        public string Email { get; set; } = "";
    }
}
