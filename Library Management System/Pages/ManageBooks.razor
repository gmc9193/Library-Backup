<!-- ManageBooks.razor -->
@page "/managebooks"
@inject IJSRuntime JSRuntime
@using System.Text.Json
<link href="/css/site.css" rel="stylesheet" />

<style>
    body {
        background-image: url('images/BookBackground.jpg');
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        margin: 0;
    }

    .container {
        text-align: center;
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
    }

    select, button, input {
        margin: 10px;
        padding: 10px;
        font-size: 16px;
    }
</style>

<div class="container">
    <h1>Manage Books</h1>

    <div>
        <label for="bookAction">Select Action:</label>
        <select id="bookAction" @bind="selectedAction">
            <option value="Add">Add Book</option>
            <option value="Edit">Edit Book</option>
            <option value="Delete">Delete Book</option>
            <option value="List">List Books</option>
        </select>

        <button @onclick="PerformAction">Go</button>
    </div>

    @if (selectedAction == "Add")
    {
        <div>
            <h3>Add a Book</h3>
            <input type="text" placeholder="Title" @bind="newBook.Title" />
            <input type="text" placeholder="Author" @bind="newBook.Author" />
            <input type="text" placeholder="ISBN" @bind="newBook.ISBN" />
            <button @onclick="AddBook">Save</button>
        </div>
    }

    @if (selectedAction == "List")
    {
        <div>
            <h3>Book List</h3>
            <ul>
                @foreach (var book in books)
                {
                    <li>@book.Title by @book.Author (ISBN: @book.ISBN)</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private string selectedAction = "Add";
    private List<Book> books = new List<Book>();
    private Book newBook = new Book();

    protected override void OnInitialized()
    {
       
        books = LoadBooksFromFile();
    }

    private void PerformAction()
    {
        switch (selectedAction)
        {
            case "Add":
                AddBook();
                break;
            case "Edit":
               
                break;
            case "Delete":
                
            case "List":
               
                break;
            default:
                break;
        }
    }

    private void AddBook()
    {
        books.Add(newBook);
        SaveBooksToFile();
        newBook = new Book(); 
    }

    private List<Book> LoadBooksFromFile()
    {
        try
        {
            string json = System.IO.File.ReadAllText("wwwroot/books.json");
            return JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();
        }
        catch (Exception)
        {
            return new List<Book>();
        }
    }

    private void SaveBooksToFile()
    {
        try
        {
            string filePath = "wwwroot/books.json";
            string json = JsonSerializer.Serialize(books);
            System.IO.File.WriteAllText(filePath, json);
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error saving books to file: {ex.Message}");
        }
    }

    public class Book
    {
        public string Title { get; set; } = "";
        public string Author { get; set; } = "";
        public string ISBN { get; set; } = "";
    }
}